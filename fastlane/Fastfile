default_platform(:ios)

# 앱 설정 (환경변수 대신 하드코딩으로 간소화)
APPS = {
  "Plots" => "com.annapo.plotfolio",
  "FewCuts" => "com.annapo.fewcuts", 
  "FewRetros" => "com.annapo.kpt",
  "Toff" => "com.tamsadan.toolinder"
}

platform :ios do
  before_all do
    # API 키 설정 (간소화)
    api_key_json = JSON.parse(File.read("api_key.json"))
    app_store_connect_api_key(
      key_id: api_key_json["key_id"],
      issuer_id: api_key_json["issuer_id"], 
      key_content: api_key_json["key"]
    )
  end

  desc "Upload to TestFlight"
  lane :upload do
    # 앱 선택 (숫자로 선택)
    app_names = APPS.keys
    UI.message("앱을 선택하세요:")
    app_names.each_with_index { |name, i| UI.message("#{i+1}. #{name}") }
    
    choice = UI.input("번호 선택 (1-#{app_names.length}): ").to_i
    unless (1..app_names.length).include?(choice)
      UI.error("잘못된 선택입니다")
      next
    end
    
    app_name = app_names[choice-1]
    bundle_id = APPS[app_name]
    UI.success("선택된 앱: #{app_name}")

    # 현재 버전 정보 표시 후 새 버전 입력
    plist_path = "Apps/#{app_name}/Resources/Info.plist"
    current_version = get_info_plist_value(path: plist_path, key: "CFBundleShortVersionString")
    UI.message("현재 버전: #{current_version}")
    
    version = UI.input("새 버전 (현재값 유지하려면 엔터): ")
    build = Time.now.strftime("%Y%m%d%H%M%S")
    UI.message("빌드 번호: #{build}")
    
    project_path = "Apps/#{app_name}/#{app_name}.xcodeproj"
    
    # 버전 업데이트
    set_info_plist_value(path: plist_path, key: "CFBundleShortVersionString", value: version) unless version.empty?
    set_info_plist_value(path: plist_path, key: "CFBundleVersion", value: build)
    
    # 코드 사이닝
    match(type: "appstore", app_identifier: bundle_id, readonly: true, username: "mooyoung2309@gmail.com")
    enable_automatic_code_signing(path: project_path)
    
    # 빌드 & 업로드
    gym(
      scheme: app_name,
      project: project_path, 
      configuration: "Release",
      export_method: "app-store"
    )
    
    upload_to_testflight(skip_waiting_for_build_processing: true)
    UI.success("#{app_name} uploaded! 🎉")
  end
  
  desc "Reset certificates"
  lane :reset do
    ["development", "appstore"].each do |type|
      match_nuke(type: type, app_identifier: APPS.values)
      match(type: type, app_identifier: APPS.values, readonly: false, username: "mooyoung2309@gmail.com")
    end
    UI.success("Certificates reset! 🔐")
  end
  
  desc "Clean everything"
  lane :clean do
    clear_derived_data
    sh("rm -rf ~/Library/Caches/org.swift.swiftpm", error_callback: ->(result) {})
    UI.success("Cleaned! 🧹")
  end
end