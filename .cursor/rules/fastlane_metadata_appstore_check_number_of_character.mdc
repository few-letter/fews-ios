---
description: Fastlane App Store 메타데이터 글자수 제한 규칙
globs: 
alwaysApply: false
---
# Fastlane 메타데이터 검증 가이드

## 📊 Apple App Store 글자수 제한

| 파일명 | 제한 | 설명 |
|--------|------|------|
| `name.txt` | 30자 | 앱 이름 |
| `subtitle.txt` | 30자 | 부제목 |
| `keywords.txt` | 100자 | 키워드 (쉼표 포함) |
| `description.txt` | 4,000자 | 앱 설명 |

> ⚠️ **중요**: 바이트가 아닌 **문자 수** 기준입니다 (한글 1글자 = 1문자)

## 📁 필수 파일 목록 (8개)

기준 언어 폴더(`ko/`)에 다음 파일들이 모두 있어야 합니다:

```
name.txt, subtitle.txt, description.txt, keywords.txt
release_notes.txt, privacy_url.txt, marketing_url.txt, support_url.txt
```

## 🔧 통합 검증 스크립트

프로젝트 루트에서 실행하세요:

```bash
#!/bin/bash
# validate_metadata.sh

APP_NAME=${1:-"Capts"}  # 기본값: Capts, 다른 앱명 전달 가능
METADATA_PATH="fastlane/metadata/$APP_NAME"

echo "🔍 $APP_NAME 메타데이터 검증 시작..."

# 1. 기준 폴더(ko) 파일 개수 확인
ko_count=$(find "$METADATA_PATH/ko" -name "*.txt" 2>/dev/null | wc -l)
echo "📁 ko/ 폴더 파일: $ko_count개 (필요: 8개)"

if [ $ko_count -ne 8 ]; then
    echo "❌ 필수 파일이 부족합니다!"
    echo "누락 가능성 있는 파일들:"
    echo "name.txt subtitle.txt description.txt keywords.txt release_notes.txt privacy_url.txt marketing_url.txt support_url.txt"
    exit 1
fi

# 2. 빈 파일 확인
empty_files=$(find "$METADATA_PATH" -name "*.txt" -exec sh -c '[ ! -s "$1" ] && echo "$1"' _ {} \; 2>/dev/null)
if [ -n "$empty_files" ]; then
    echo "❌ 빈 파일 발견:"
    echo "$empty_files"
else
    echo "✅ 빈 파일 없음"
fi

# 3. 글자수 제한 확인 (멀티바이트 안전)
echo "📝 글자수 제한 확인..."
violations=$(find "$METADATA_PATH" -name "*.txt" -exec sh -c '
    if [ -s "$1" ]; then
        chars=$(python3 -c "with open(\"$1\") as f: print(len(f.read().strip()))" 2>/dev/null || echo "0")
        filename=$(basename "$1")
        case "$filename" in
            name.txt|subtitle.txt)
                if [ "$chars" -gt 30 ]; then
                    echo "$1: $chars/30 chars ❌"
                fi
                ;;
            keywords.txt)
                if [ "$chars" -gt 100 ]; then
                    echo "$1: $chars/100 chars ❌"
                fi
                ;;
        esac
    fi
' _ {} \; 2>/dev/null)

if [ -n "$violations" ]; then
    echo "❌ 글자수 초과:"
    echo "$violations"
else
    echo "✅ 모든 파일이 글자수 제한 내"
fi

# 4. 언어별 파일 개수 비교
echo "🌐 언어별 파일 개수 확인..."
for lang_dir in "$METADATA_PATH"/*; do
    if [ -d "$lang_dir" ]; then
        lang=$(basename "$lang_dir")
        lang_count=$(find "$lang_dir" -name "*.txt" | wc -l)
        if [ "$lang" != "ko" ] && [ $lang_count -ne $ko_count ]; then
            echo "❌ $lang: $lang_count개 (기준: $ko_count개)"
        fi
    fi
done

echo "✅ 검증 완료!"
```

## 🚀 사용법

### 1. 스크립트 실행
```bash
# 기본 (Capts 앱)
bash validate_metadata.sh

# 다른 앱
bash validate_metadata.sh Plots
bash validate_metadata.sh Multis
```

### 2. 빠른 글자수 확인
```bash
# 특정 파일 글자수 확인
python3 -c "with open('fastlane/metadata/Capts/ko/name.txt') as f: print(f'글자수: {len(f.read().strip())}')"

# 현재 폴더의 모든 txt 파일 글자수
find . -name "*.txt" -exec python3 -c "
import sys
with open(sys.argv[1]) as f: 
    content = f.read().strip()
    print(f'{sys.argv[1]}: {len(content)} chars')
" {} \;
```

## 🛠️ 문제 해결

### 글자수 초과 시 수정 전략

**name.txt (30자 제한)**
- ❌ `Plots - 책 읽기 일기장` (11자)
- ✅ `Plots - 독서일기` (9자)

**subtitle.txt (30자 제한)**
- ❌ `책, 영화, 문화생활을 기록하는 앱` (17자)
- ✅ `책, 영화, 문화 기록` (10자)

**keywords.txt (100자 제한)**
- 중요도 순으로 키워드 선별
- 쉼표와 공백도 글자수에 포함됨 주의

### 빠른 파일 생성
```bash
# 누락된 파일 생성 (빈 파일)
touch fastlane/metadata/{AppName}/ko/{name,subtitle,description,keywords,release_notes,privacy_url,marketing_url,support_url}.txt
```

## 📋 체크리스트

번역 작업 전:
- [ ] ko/ 폴더에 8개 파일 모두 존재
- [ ] 모든 파일에 내용 있음 (빈 파일 없음)
- [ ] 글자수 제한 준수

번역 작업 후:
- [ ] 모든 언어 폴더에 동일한 파일 개수
- [ ] 빈 파일 없음
- [ ] 글자수 제한 준수

Fastlane 업로드 전:
- [ ] 전체 검증 스크립트 실행
- [ ] 모든 검증 통과