# JSON 메타데이터 글자수 검증 도구

## 📊 Apple App Store 글자수 제한

| 필드명        | 제한    | 설명               |
| ------------- | ------- | ------------------ |
| `name`        | 30자    | 앱 이름            |
| `subtitle`    | 30자    | 부제목             |
| `keywords`    | 100자   | 키워드 (쉼표 포함) |
| `description` | 4,000자 | 앱 설명            |

> ⚠️ **중요**: 바이트가 아닌 **문자 수** 기준입니다 (한글 1글자 = 1문자)

## 🔍 JSON 글자수 검증 스크립트

```python
#!/usr/bin/env python3
# scripts/metadata/check_json_chars.py

import json
import sys

# 글자수 제한 설정
CHAR_LIMITS = {
    'name': 30,
    'subtitle': 30,
    'keywords': 100,
    'description': 4000
}

def check_json_character_limits(config_path):
    """JSON 설정 파일의 글자수 제한 검증"""
    print(f"🔍 JSON 메타데이터 글자수 검증: {config_path}")

    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)

    app_name = config.get('app_name', 'unknown')
    violations = []

    print(f"\n📱 앱: {app_name}")
    print("=" * 50)

    for lang, data in config.get('localization', {}).items():
        print(f"\n🌐 언어: {lang}")

        for field, content in data.items():
            if field in CHAR_LIMITS:
                char_count = len(str(content))
                limit = CHAR_LIMITS[field]

                status = "✅" if char_count <= limit else "❌"
                print(f"  {field:12} : {char_count:3d}/{limit:3d} 글자 {status}")

                if char_count > limit:
                    violations.append({
                        'app': app_name,
                        'lang': lang,
                        'field': field,
                        'current': char_count,
                        'limit': limit,
                        'excess': char_count - limit
                    })

    # 결과 요약
    if violations:
        print(f"\n❌ 글자수 초과 항목: {len(violations)}개")
        print("-" * 50)
        for v in violations:
            print(f"  {v['lang']}.{v['field']}: {v['current']}자 ({v['excess']}자 초과)")
        return False
    else:
        print(f"\n✅ 모든 항목이 글자수 제한을 준수합니다!")
        return True

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("사용법: python3 check_json_chars.py <config.json>")
        sys.exit(1)

    config_file = sys.argv[1]
    try:
        is_valid = check_json_character_limits(config_file)
        sys.exit(0 if is_valid else 1)
    except FileNotFoundError:
        print(f"❌ 파일을 찾을 수 없습니다: {config_file}")
        sys.exit(1)
    except json.JSONDecodeError:
        print(f"❌ JSON 형식이 올바르지 않습니다: {config_file}")
        sys.exit(1)
```

## 🚀 사용법

### 단일 파일 검증

```bash
python3 scripts/metadata/check_json_chars.py scripts/metadata/resources/config/toffs_config.json
```

### 모든 config 파일 검증

```bash
for config in scripts/metadata/resources/config/*.json; do
    echo "=== $(basename $config) ==="
    python3 scripts/metadata/check_json_chars.py "$config"
    echo
done
```

### 빠른 글자수 확인 (특정 필드)

```bash
# 특정 필드의 글자수만 확인
python3 -c "
import json
with open('scripts/metadata/resources/config/toffs_config.json') as f:
    config = json.load(f)
    ko_data = config['localization']['ko']
    for field in ['name', 'subtitle', 'keywords']:
        content = ko_data.get(field, '')
        print(f'{field}: {len(content)} 글자')
"
```

## 🎯 JSON 구조 예시

```json
{
  "app_name": "toffs",
  "localization": {
    "ko": {
      "name": "Toffs: 주식 ETF 트래커", // 30자 제한
      "subtitle": "배당 캘린더 투자일지", // 30자 제한
      "keywords": "주식,etf,배당금,달력,수익률", // 100자 제한
      "description": "앱에 대한 상세한 설명..." // 4000자 제한
    },
    "en-US": {
      "name": "Toffs: Stock ETF Tracker",
      "subtitle": "Dividend Calendar Journal",
      "keywords": "stock,etf,dividend,calendar",
      "description": "Detailed app description..."
    }
  }
}
```

## 💡 글자수 초과 시 수정 가이드

**name (30자 제한)**

- 핵심 키워드만 남기기
- 불필요한 조사, 부사 제거

**subtitle (30자 제한)**

- 앱의 핵심 기능만 표현
- 중복 단어 제거

**keywords (100자 제한)**

- 중요도 낮은 키워드 제거
- 쉼표 뒤 공백 최소화
- 유사한 의미의 키워드 통합

**description (4000자 제한)**

- 중복 문장 제거
- 핵심 기능 위주로 축약
- 불필요한 수식어 제거
