# Refactored Fastfile
# frozen_string_literal: true

default_platform(:ios)

# --- Configuration ---

# App identifiers
APPS = {
  "Toffs" => "com.tamsadan.toolinder",
  "Plots" => "com.annapo.plotfolio",
  "Retros" => "com.annapo.kpt",
  "Multis" => "com.annapo.taskfolio",
  "Capts" => "com.folio.world.mulling.app.ios",
  "FewCuts" => "com.annapo.fewcuts",
}.freeze

# Tuist workspace name, located in the project root
WORKSPACE_NAME = "FewsWorkspace"
WORKSPACE_PATH = "../#{WORKSPACE_NAME}.xcworkspace".freeze

# CRITICAL: Screenshots path - DO NOT MODIFY THIS PATH
# This path is used throughout the application for screenshot upload
# Changing this path will break the screenshot upload functionality
SCREENSHOTS_PATH_TEMPLATE = "./fastlane/screenshots/%s/".freeze

# CRITICAL: Metadata path - DO NOT MODIFY THIS PATH
# This path is used throughout the application for metadata upload
# Changing this path will break the metadata upload functionality
METADATA_PATH_TEMPLATE = "./fastlane/metadata/%s/".freeze

# --- Lanes ---

platform :ios do
  # This is executed before any lane
  before_all do
    setup_environment
  end

  desc "App Store에 앱을 빌드하고 업로드합니다. (스크린샷 생성 및 메타데이터 업로드 포함)"
  lane :upload do
    UI.header("🚀 전체 프로세스 시작: 스크린샷 생성 및 App Store 업로드")
    
    selected_apps = select_apps(all_apps: APPS.keys)
    break if selected_apps.empty?

    screenshot_results = generate_screenshots_for_apps(apps: selected_apps)
    upload_results = upload_app_details(apps: selected_apps)

    print_full_upload_summary(screenshot_results: screenshot_results, upload_results: upload_results)
  end

  desc "TestFlight에 앱을 빌드하고 업로드합니다."
  lane :testflight do
    deploy(
      is_testflight: true,
      title: "TestFlight 업로드"
    )
  end

  desc "App Store에 리뷰를 위해 앱을 빌드하고 제출합니다."
  lane :submit_to_appstore do
    UI.header("🚀 App Store 빌드 및 제출 (스크린샷 생성 및 메타데이터 업로드 포함)")
    
    selected_apps = select_apps(all_apps: APPS.keys)
    break if selected_apps.empty?

    app_versions = prompt_for_version_info(apps: selected_apps)
    confirmation = UI.input("위 정보로 빌드 및 제출을 시작하시겠습니까? (엔터 또는 y): ")
    break unless confirmation.empty? || confirmation.downcase.start_with?('y')

    update_version_info(app_versions: app_versions)
    screenshot_results = generate_screenshots_for_apps(apps: selected_apps)
    upload_results = upload_app_details(apps: selected_apps)
    
    # 빌드 및 제출 단계
    UI.header("🎯 3단계: 앱 빌드 및 App Store 제출")
    build_results = { successful: [], failed: [] }
    
    selected_apps.each_with_index do |app_name, index|
      UI.header("📱 #{index + 1}/#{selected_apps.length}: #{app_name} 빌드 및 제출 중...")
      
      version_info = app_versions[app_name]
      unless version_info
        UI.error("❌ #{app_name}: Info.plist 파일을 찾을 수 없어 건너뜁니다.")
        build_results[:failed] << { app: app_name, reason: "Info.plist 파일을 찾을 수 없음" }
        next
      end

      begin
        ipa_path = build_and_archive_app(app_name: app_name, version_info: version_info)
        submit_for_review(app_name: app_name, ipa_path: ipa_path)
        build_results[:successful] << app_name
        UI.success("✅ #{app_name} 빌드 및 제출 완료")
      rescue => e
        build_results[:failed] << { app: app_name, reason: e.message }
        UI.error("❌ #{app_name} 빌드/제출 실패: #{e.message}")
      end
    end
    
    print_full_submit_summary(
      screenshot_results: screenshot_results, 
      upload_results: upload_results, 
      build_results: build_results
    )
  end

  desc "App Store에 메타데이터와 스크린샷만 업로드합니다."
  lane :submit_to_appstore_info do
    UI.header("🚀 App Store 메타데이터 및 스크린샷 업로드")
    
    selected_apps = select_apps(all_apps: APPS.keys)
    break if selected_apps.empty?

    app_versions = prompt_for_version_info(apps: selected_apps)
    confirmation = UI.input("위 정보로 업로드를 시작하시겠습니까? (엔터 또는 y): ")
    break unless confirmation.empty? || confirmation.downcase.start_with?('y')

    update_version_info(app_versions: app_versions)
    screenshot_results = generate_screenshots_for_apps(apps: selected_apps)
    upload_results = upload_app_details(apps: selected_apps)

    print_full_upload_summary(screenshot_results: screenshot_results, upload_results: upload_results)
  end

  desc "인증서를 안전하게 초기화합니다."
  lane :reset do
    UI.header("🔄 인증서 및 프로파일 초기화 시작")
    
    confirmation = UI.confirm("⚠️ 경고: 이 작업은 모든 기존 인증서와 프로파일을 삭제합니다. 계속하시겠습니까?")
    return unless confirmation
    
    ["development", "appstore"].each do |type|
      UI.header("🗑️ #{type} 인증서 정리 중...")
      begin
        # 안전한 nuke 옵션 사용
        match_nuke(
          type: type, 
          app_identifier: APPS.values,
          skip_confirmation: false,  # 확인 과정 유지
          username: "mooyoung2309@gmail.com"
        )
        UI.success("✅ #{type} 인증서 정리 완료")
      rescue => nuke_error
        UI.error("❌ #{type} 인증서 정리 실패: #{nuke_error.message}")
        next
      end
      
      UI.header("🔧 #{type} 인증서 재생성 중...")
      begin
        # 안전한 재생성 옵션
        match(
          type: type, 
          app_identifier: APPS.values, 
          readonly: false, 
          username: "mooyoung2309@gmail.com",
          generate_apple_certs: true,  # Apple 인증서 생성 허용
          skip_set_partition_list: true,
          force: false,  # 강제 생성은 안함
          include_all_certificates: false,
          skip_certificate_matching: false,
          platform: "ios"
        )
        UI.success("✅ #{type} 인증서 재생성 완료")
      rescue => match_error
        UI.error("❌ #{type} 인증서 재생성 실패: #{match_error.message}")
      end
    end
    
    UI.success("✅ 인증서 초기화 완료! 🔐")
    UI.message("💡 이제 각 앱을 빌드하여 새 인증서가 정상 작동하는지 확인하세요.")
  end

  private_lane :deploy do |options|
    UI.header("🚀 #{options[:title]} 프로세스 시작")
    
    selected_apps = select_apps(all_apps: APPS.keys)
    break if selected_apps.empty?

    app_versions = prompt_for_version_info(apps: selected_apps)
    break unless UI.confirm("위 정보로 빌드를 시작하시겠습니까?")

    results = { successful: [], failed: [], build_only_success: [] }
    selected_apps.each_with_index do |app_name, index|
      UI.header("📱 #{index + 1}/#{selected_apps.length}: #{app_name} 처리 중...")
      
      version_info = app_versions[app_name]
      unless version_info
        UI.error("❌ #{app_name}: Info.plist 파일을 찾을 수 없어 건너뜁니다.")
        results[:failed] << app_name
        next
      end

      begin
        ipa_path = build_and_archive_app(app_name: app_name, version_info: version_info)

        if options[:is_testflight]
          upload_to_testflight(ipa: ipa_path, skip_waiting_for_build_processing: true)
          UI.success("✅ #{app_name} 빌드 및 TestFlight 업로드 완료")
          
          begin
            upload_metadata(app_name: app_name)
            results[:successful] << app_name
          rescue => e
            UI.error("❌ #{app_name} 메타데이터 업로드 실패: #{e.message}")
            results[:build_only_success] << app_name
          end
        else
          submit_for_review(app_name: app_name, ipa_path: ipa_path)
          results[:successful] << app_name
        end
      rescue => e
        results[:failed] << app_name
        UI.error("❌ #{app_name} 처리 실패: #{e.message}")
      end
    end

    print_deploy_summary(results: results, title: options[:title])
  end

  private_lane :generate do
    UI.message("🔧 Tuist 프로젝트를 생성합니다...")
    Dir.chdir("..") do # Move to project root to run tuist
      # 현재 디렉토리 확인
      UI.message("📁 현재 디렉토리: #{Dir.pwd}")
      
      # tuist clean 실행 (실패해도 계속 진행)
      begin
        sh("tuist clean")
        UI.success("✅ Tuist clean 완료")
      rescue => e
        UI.message("⚠️ Tuist clean 실행 중 오류가 있었지만 계속 진행합니다: #{e.message}")
      end
      
      # tuist install 실행 (성공해야 계속 진행)
      UI.message("📦 Tuist 종속성 설치 중...")
      begin
        sh("tuist install")
        UI.success("✅ Tuist install 완료")
      rescue => e
        UI.error("❌ Tuist install 실패: #{e.message}")
        raise "Tuist install이 실패했습니다. 종속성을 확인해주세요."
      end
      
      # 잠시 대기 (install 완료 후 파일 시스템 동기화)
      sleep(2)
      
      # Package.resolved 파일 존재 확인
      if File.exist?("Tuist/Package.resolved")
        UI.success("✅ Package.resolved 파일 확인")
      else
        UI.error("❌ Package.resolved 파일이 없습니다. install이 완료되지 않았을 수 있습니다.")
      end
      
      # tuist generate 실행 (재시도 로직 포함)
      UI.message("🏗️ Tuist 프로젝트 생성 중...")
      generate_success = false
      retry_count = 0
      max_retries = 1
      
      begin
        sh("tuist generate --no-open")
        UI.success("✅ Tuist generate 완료")
        generate_success = true
      rescue => e
        retry_count += 1
        UI.error("❌ Tuist generate 실패 (#{retry_count}/#{max_retries + 1}): #{e.message}")
        
        if retry_count <= max_retries
          UI.message("⏳ 3초 후 다시 시도합니다...")
          sleep(3)
          retry
        else
          UI.error("❌ Tuist generate 최대 재시도 횟수 초과")
          raise "Tuist generate가 #{max_retries + 1}번 시도 모두 실패했습니다: #{e.message}"
        end
      end
      
      # 워크스페이스 파일 생성 확인
      workspace_file = "#{WORKSPACE_NAME}.xcworkspace"
      if File.exist?(workspace_file)
        UI.success("✅ 워크스페이스 파일 생성 확인: #{workspace_file}")
      else
        UI.error("❌ 워크스페이스 파일이 생성되지 않았습니다: #{workspace_file}")
        raise "워크스페이스 파일 생성 실패"
      end
    end
    UI.success("✅ Tuist 프로젝트 생성 완료!")
  end

  def setup_environment
    api_key_json = JSON.parse(File.read("api_key.json"))
    app_store_connect_api_key(
      key_id: api_key_json["key_id"],
      issuer_id: api_key_json["issuer_id"], 
      key_content: api_key_json["key"]
    )
    
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
    ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "2"
    ENV["ENABLE_USER_SCRIPT_SANDBOXING"] = "NO"
    ENV["FASTLANE_ENABLE_BETA_DELIVER_SYNC_SCREENSHOTS"] = "true"
    ENV["FASTLANE_SCREENSHOT_PROCESSING_TIMEOUT"] = "120"
    ENV["FASTLANE_SKIP_SET_PARTITION_LIST"] = "true"
  end

  def select_apps(all_apps:)
    UI.message("앱을 선택하세요:")
    all_apps.each_with_index { |name, i| UI.message("#{i+1}. #{name}") }
    
    choices_input = UI.input("번호 선택 (여러개는 콤마로 구분, 예: 1,3,5): ")
    choices = choices_input.split(',').map(&:strip).map(&:to_i)
    
    invalid_choices = choices.reject { |c| (1..all_apps.length).include?(c) }
    unless invalid_choices.empty?
      UI.error("잘못된 선택입니다: #{invalid_choices.join(', ')}")
      return []
    end
    
    selected_apps = choices.map { |c| all_apps[c-1] }.uniq
    UI.success("선택된 앱: #{selected_apps.join(', ')}")
    selected_apps
  end

  def find_plist_path(app_name)
    path = "../Apps/#{app_name}/Resources/Info.plist"
    File.exist?(path) ? File.expand_path(path) : nil
  end

  def prompt_for_version_info(apps:)
    UI.header("📝 버전 정보 입력")
    app_versions = {}
    
    apps.each do |app_name|
      plist_path = find_plist_path(app_name)
      if plist_path
        current_version = get_info_plist_value(path: plist_path, key: "CFBundleShortVersionString")
        UI.message("#{app_name} 현재 버전: #{current_version}")
        
        version_input = UI.input("#{app_name}의 새 버전 (현재값 유지하려면 엔터): ")
        version = version_input.empty? ? current_version : version_input
        build = Time.now.strftime("%Y%m%d%H%M%S")
        
        app_versions[app_name] = { plist_path: plist_path, version: version, build: build }
      else
        UI.error("#{app_name}의 Info.plist 파일을 찾을 수 없습니다!")
        app_versions[app_name] = nil
      end
    end
    
    UI.header("📋 입력된 버전 정보 확인")
    app_versions.each do |app, info|
      info ? UI.message("#{app}: 버전 #{info[:version]}, 빌드 #{info[:build]}") : UI.error("#{app}: 설정 불가")
    end
    
    app_versions
  end

  def update_version_info(app_versions:)
    UI.header("🔄 버전 정보 업데이트 중...")
    
    app_versions.each do |app_name, version_info|
      next unless version_info
      
      UI.message("📝 #{app_name} 버전 업데이트: #{version_info[:version]}, 빌드: #{version_info[:build]}")
      set_info_plist_value(path: version_info[:plist_path], key: "CFBundleShortVersionString", value: version_info[:version])
      set_info_plist_value(path: version_info[:plist_path], key: "CFBundleVersion", value: version_info[:build])
    end
    
    UI.success("✅ 모든 앱의 버전 정보 업데이트 완료")
  end

  def build_and_archive_app(app_name:, version_info:)
    UI.message("🔨 #{app_name} 빌드 및 아카이브 중...")
    
    temp_keychain_name = "login"  # 기본값
    temp_keychain_path = "login.keychain"  # 기본값
    
    begin
      # 버전 정보 업데이트
      set_info_plist_value(path: version_info[:plist_path], key: "CFBundleShortVersionString", value: version_info[:version])
      set_info_plist_value(path: version_info[:plist_path], key: "CFBundleVersion", value: version_info[:build])
      
      # 파생 데이터 정리 및 프로젝트 생성
      clear_derived_data
      generate
      
      # 임시 키체인 생성 및 설정
      temp_keychain_name = "fastlane_#{app_name}_#{Time.now.to_i}"
      temp_keychain_path = "#{temp_keychain_name}.keychain"
      
      UI.message("🔐 임시 키체인 생성 중: #{temp_keychain_name}")
      begin
        # 기존 임시 키체인 삭제 (있다면)
        sh("security delete-keychain #{temp_keychain_path} 2>/dev/null || true")
        
        # 새 임시 키체인 생성
        sh("security create-keychain -p '' #{temp_keychain_path}")
        sh("security set-keychain-settings -t 3600 -l #{temp_keychain_path}")
        sh("security unlock-keychain -p '' #{temp_keychain_path}")
        
        # 키체인 검색 목록에 추가
        sh("security list-keychains -s #{temp_keychain_path} login.keychain")
        
        UI.success("✅ 임시 키체인 생성 완료: #{temp_keychain_name}")
      rescue => e
        UI.message("⚠️ 임시 키체인 생성 중 경고 (기존 키체인 사용): #{e.message}")
        temp_keychain_name = "login"
        temp_keychain_path = "login.keychain"
      end
      
      # 인증서 설정 (임시 키체인 사용)
      UI.message("🔐 인증서 설정 중 (임시 키체인: #{temp_keychain_name})...")
      
      # 모든 앱에 대해 동일한 로직 사용
      begin
        # 먼저 readonly 모드로 기존 인증서 시도
        match(
          type: "appstore",
          app_identifier: APPS[app_name],
          readonly: true,
          skip_set_partition_list: true,
          keychain_name: temp_keychain_path,
          keychain_password: "",
          skip_certificate_matching: false,
          generate_apple_certs: false,  # 기존 인증서만 사용
          platform: "ios"
        )
        UI.success("✅ #{app_name} 기존 인증서로 프로파일 다운로드 완료")
      rescue => e
        if e.message.include?("No matching provisioning profiles found") || 
           e.message.include?("cannot create a new one because you enabled `readonly`") ||
           e.message.include?("not valid") ||
           e.message.include?("expired")
          UI.important("⚠️ #{app_name}의 provisioning profile 문제: #{e.message}")
          UI.important("새로운 인증서 및 프로파일을 생성합니다...")
          
          # 새로 생성할 때는 안전한 옵션 사용
          match(
            type: "appstore",
            app_identifier: APPS[app_name],
            readonly: false,
            skip_set_partition_list: true,
            keychain_name: temp_keychain_path,
            keychain_password: "",
            username: "mooyoung2309@gmail.com",
            generate_apple_certs: true,  # Apple 인증서 생성 허용
            skip_provisioning_profiles: false,
            platform: "ios",
            force: false,  # 강제 재생성은 안함
            include_all_certificates: false,
            skip_certificate_matching: false  # 검증 유지
          )
          UI.success("✅ #{app_name}의 새 provisioning profile 생성 완료")
        else
          # 다른 에러는 그대로 전파
          raise e
        end
      end
      
      # 빌드 디렉토리 생성
      output_path = "./build"
      sh("mkdir -p #{output_path}")
      
      # 빌드 직전 키체인 잠금 해제
      UI.message("🔓 빌드를 위한 키체인 잠금 해제: #{temp_keychain_name}...")
      begin
        sh("security unlock-keychain -p '' #{temp_keychain_path}")
        sh("security set-keychain-settings -t 3600 -l #{temp_keychain_path}")
      rescue => e
        UI.message("⚠️ 키체인 설정 중 경고 (무시해도 됨): #{e.message}")
      end
      
      # 워크스페이스 파일의 절대 경로 확인
      workspace_path = File.expand_path(WORKSPACE_PATH)
      UI.message("🔍 워크스페이스 경로: #{workspace_path}")
      
      unless File.exist?(workspace_path)
        UI.error("❌ 워크스페이스 파일을 찾을 수 없습니다: #{workspace_path}")
        raise "워크스페이스 파일을 찾을 수 없습니다: #{workspace_path}"
      end
      
      # 앱 빌드 및 아카이브
      gym(
        workspace: workspace_path,
        scheme: app_name,
        configuration: "Release",
        export_method: "app-store",
        clean: false,
        destination: "generic/platform=iOS",
        skip_package_dependencies_resolution: true,
        disable_package_automatic_updates: true,
        output_directory: output_path,
        output_name: app_name,
        xcargs: "-allowProvisioningUpdates -skipMacroValidation -CODE_SIGN_STYLE=Manual",
        export_options: {
          method: "app-store",
          compileBitcode: false,
          uploadBitcode: false,
          uploadSymbols: true,
          manageAppVersionAndBuildNumber: false,
          signingStyle: "manual",
          provisioningProfiles: {
            APPS[app_name] => "match AppStore #{APPS[app_name]}"
          }
        }
      )
      
      UI.success("✅ #{app_name} 빌드 완료")
      
      # IPA 파일 경로 반환
      return "#{output_path}/#{app_name}.ipa"
      
    rescue => e
      # 에러 발생 시에도 임시 키체인 정리
      UI.error("❌ 빌드 중 에러 발생: #{e.message}")
      unless temp_keychain_name == "login"
        UI.message("🧹 에러 발생으로 인한 임시 키체인 정리: #{temp_keychain_name}")
        begin
          sh("security delete-keychain #{temp_keychain_path} 2>/dev/null || true")
          sh("security list-keychains -s login.keychain")
        rescue => cleanup_error
          UI.message("⚠️ 임시 키체인 정리 중 경고: #{cleanup_error.message}")
        end
      end
      raise e
      
    ensure
      # 성공/실패와 관계없이 항상 임시 키체인 정리
      unless temp_keychain_name == "login"
        UI.message("🧹 임시 키체인 정리 중: #{temp_keychain_name}")
        begin
          sh("security delete-keychain #{temp_keychain_path} 2>/dev/null || true")
          sh("security list-keychains -s login.keychain")
          UI.success("✅ 임시 키체인 정리 완료")
        rescue => e
          UI.message("⚠️ 임시 키체인 정리 중 경고 (무시해도 됨): #{e.message}")
        end
      end
    end
  end

  def upload_metadata(app_name:)
    UI.message("📝 #{app_name} 메타데이터 및 스크린샷 업로드 중...")
    upload_to_app_store(
      app_identifier: APPS[app_name],
      skip_binary_upload: true,
      skip_screenshots: false,
      force: true,
      ignore_language_directory_validation: true,
      metadata_path: METADATA_PATH_TEMPLATE % app_name,
      screenshots_path: SCREENSHOTS_PATH_TEMPLATE % app_name,
      sync_screenshots: true
    )
    UI.success("✅ #{app_name} 메타데이터 및 스크린샷 업로드 완료")
  end

  def submit_for_review(app_name:, ipa_path:)
    UI.message("🚀 #{app_name} App Store 제출 중...")
    upload_to_app_store(
      ipa: ipa_path,
      app_identifier: APPS[app_name],
      submit_for_review: true,
      automatic_release: true,
      force: true,
      skip_screenshots: true,
      run_precheck_before_submit: true,
      ignore_language_directory_validation: true,
      metadata_path: METADATA_PATH_TEMPLATE % app_name,
      submission_information: { 
        export_compliance_uses_encryption: false,
        add_id_info_uses_idfa: false 
      }
    )
    UI.success("✅ #{app_name} App Store 제출 완료")
  end

  def print_deploy_summary(results:, title:)
    UI.header("📊 #{title} 결과 요약")
    
    UI.success("🎉 전체 과정 성공: #{results[:successful].join(', ')}") if results[:successful].any?
    UI.message("⚠️ 빌드 성공, 메타데이터 실패: #{results[:build_only_success].join(', ')}") if results[:build_only_success].any?
    UI.error("❌ 빌드/업로드 실패: #{results[:failed].join(', ')}") if results[:failed].any?
    
    total = results[:successful].length + results[:build_only_success].length + results[:failed].length
    total_success = results[:successful].length + results[:build_only_success].length
    
    if results[:failed].empty?
      UI.success("모든 앱 처리 완료! 🚀")
    else
      UI.message("빌드 완료: #{total_success}/#{total} 성공")
    end
  end

  def generate_screenshots_for_apps(apps:)
    UI.header("🎯 1단계: 스크린샷 생성")
    results = { successful: [], failed: [] }
    
    apps.each_with_index do |app_name, index|
      UI.header("📱 #{index + 1}/#{apps.length}: #{app_name} 스크린샷 생성 중...")
      begin

        run_screenshot_generator(app_name)
        results[:successful] << app_name
        UI.success("✅ #{app_name} 스크린샷 생성 및 복사 완료!")
      rescue => e
        results[:failed] << { app: app_name, reason: e.message }
        UI.error("❌ #{app_name} 스크린샷 생성 실패: #{e.message}")
      end
    end
    results
  end

  def run_screenshot_generator(app_name)
    xmakes_dir = "../xmakes"
    raise "xmakes 폴더를 찾을 수 없습니다: #{xmakes_dir}" unless Dir.exist?(xmakes_dir)

    venv_python_relative_to_appstore = "../venv/bin/python"
    xmakes_appstore_dir = File.join(xmakes_dir, "appstore")
    
    unless File.exist?(File.join(xmakes_appstore_dir, venv_python_relative_to_appstore))
      raise "Python 가상환경을 찾을 수 없습니다. `cd ../xmakes && python3 setup_venv.py`를 실행하세요."
    end

    Dir.chdir(xmakes_appstore_dir) do
      sh("rm -rf output") if Dir.exist?("output")
      sh("#{venv_python_relative_to_appstore} run_appstore_preview.py #{app_name}")
      copy_screenshots(app_name: app_name)
    end
  end

  def copy_screenshots(app_name:)
    UI.message("📁 스크린샷 복사 중...")
    source_dir = "output/#{app_name}"
    raise "생성된 스크린샷 폴더를 찾을 수 없습니다: #{source_dir}" unless Dir.exist?(source_dir)

    project_root = File.expand_path("../..")
    
    target_app_dir = File.join(project_root, "fastlane", "screenshots", app_name)
    sh("rm -rf '#{target_app_dir}'") if Dir.exist?(target_app_dir)
    sh("mkdir -p '#{target_app_dir}'")

    metadata_locales = Dir.glob(File.join(project_root, "fastlane", "metadata", app_name, "*")).select { |f| File.directory?(f) }.map { |f| File.basename(f) }

    generated_locales = Dir.glob("#{source_dir}/*/*").select { |f| File.directory?(f) }.map { |f| File.basename(f) }

    all_locales = (metadata_locales + generated_locales).uniq
    all_locales.each do |locale|
      target_lang_dir = File.join(target_app_dir, locale)
      sh("mkdir -p '#{target_lang_dir}'")
      UI.message("📁 #{locale} 스크린샷 디렉토리 생성.")
    end

    Dir.glob("#{source_dir}/*/*").each do |lang_dir|
      next unless File.directory?(lang_dir)
      lang_code = File.basename(lang_dir)
      target_lang_dir = File.join(target_app_dir, lang_code)
      
      png_files = Dir.glob("#{lang_dir}/*.png")
      if png_files.empty?
        UI.message("⚠️  #{lang_code}: 복사할 PNG 스크린샷이 없습니다.")
        next
      end
      
      sh("cp '#{lang_dir}'/*.png '#{target_lang_dir}/'")
      UI.message("📸 #{lang_code} 스크린샷 복사 완료.")
    end
  end

  def upload_app_details(apps:)
    UI.header("🎯 2단계: 메타데이터 및 스크린샷 업로드")
    results = { successful: [], failed: [] }

    apps.each_with_index do |app_name, index|
      UI.header("📱 #{index + 1}/#{apps.length}: #{app_name} 업로드 중...")
      begin
        plist_path = find_plist_path(app_name)
        raise "Info.plist 파일을 찾을 수 없습니다." unless plist_path

        version = get_info_plist_value(path: plist_path, key: "CFBundleShortVersionString")
        build = Time.now.strftime("%Y%m%d%H%M%S")
        set_info_plist_value(path: plist_path, key: "CFBundleVersion", value: build)
        UI.message("🔢 #{app_name} 버전: #{version}, 새 빌드: #{build}")

        screenshots_path = SCREENSHOTS_PATH_TEMPLATE % app_name
        has_screenshots = Dir.exist?(screenshots_path) && !Dir.glob("#{screenshots_path}/**/*.{jpg,png,jpeg}").empty?

        upload_to_app_store(
          app_identifier: APPS[app_name],
          app_version: version,
          skip_binary_upload: true,
          force: true,
          metadata_path: METADATA_PATH_TEMPLATE % app_name,
          screenshots_path: SCREENSHOTS_PATH_TEMPLATE % app_name,
          skip_screenshots: false,
          sync_screenshots: true,
          ignore_language_directory_validation: true,
          precheck_include_in_app_purchases: false,
          run_precheck_before_submit: false
        )
        
        results[:successful] << app_name
        UI.success("✅ #{app_name} 업로드 완료!")
      rescue => e
        if e.message.include?("Failed verification of all screenshots deleted")
          UI.important("⚠️ #{app_name} 스크린샷 삭제 확인 실패: #{e.message}")
          UI.important("이 문제는 Fastlane의 알려진 동작이며, 업로드는 계속됩니다.")
          UI.important("실제 업로드는 성공할 수 있으므로 App Store Connect에서 확인하세요.")
          results[:successful] << app_name # Consider it successful for the purpose of the overall lane
        elsif e.message.include?("screenshot") && e.message.include?("delete")
          UI.important("⚠️ #{app_name} 스크린샷 관련 오류: #{e.message}")
          UI.important("이 문제는 Fastlane의 알려진 동작이며, 업로드는 계속됩니다.")
          results[:successful] << app_name
        else
          results[:failed] << { app: app_name, reason: e.message }
          UI.error("❌ #{app_name} 업로드 실패: #{e.message}")
        end
      end
    end
    results
  end

  def print_full_upload_summary(screenshot_results:, upload_results:)
    UI.header("📊 전체 프로세스 결과 요약")

    UI.message("
--- 스크린샷 생성 결과 ---")
    UI.success("✅ 성공: #{screenshot_results[:successful].join(', ')}") if screenshot_results[:successful].any?
    UI.error("❌ 실패: #{screenshot_results[:failed].map { |f| f[:app] }.join(', ')}") if screenshot_results[:failed].any?

    UI.message("
--- App Store 업로드 결과 ---")
    UI.success("✅ 성공: #{upload_results[:successful].join(', ')}") if upload_results[:successful].any?
    UI.error("❌ 실패: #{upload_results[:failed].map { |f| f[:app] }.join(', ')}") if upload_results[:failed].any?

    UI.message("
🎉 전체 프로세스 완료!")
    UI.message("💡 App Store Connect에서 변경사항을 확인하세요: https://appstoreconnect.apple.com/")
  end

  def print_full_submit_summary(screenshot_results:, upload_results:, build_results:)
    UI.header("📊 전체 빌드 및 제출 결과 요약")

    UI.message("
--- 스크린샷 생성 결과 ---")
    UI.success("✅ 성공: #{screenshot_results[:successful].join(', ')}") if screenshot_results[:successful].any?
    UI.error("❌ 실패: #{screenshot_results[:failed].map { |f| f[:app] }.join(', ')}") if screenshot_results[:failed].any?

    UI.message("
--- 메타데이터 업로드 결과 ---")
    UI.success("✅ 성공: #{upload_results[:successful].join(', ')}") if upload_results[:successful].any?
    UI.error("❌ 실패: #{upload_results[:failed].map { |f| f[:app] }.join(', ')}") if upload_results[:failed].any?

    UI.message("
--- 앱 빌드 및 제출 결과 ---")
    UI.success("✅ 성공: #{build_results[:successful].join(', ')}") if build_results[:successful].any?
    UI.error("❌ 실패: #{build_results[:failed].map { |f| f[:app] }.join(', ')}") if build_results[:failed].any?

    total_apps = screenshot_results[:successful].length + screenshot_results[:failed].length
    successful_builds = build_results[:successful].length
    
    UI.message("
🎉 전체 프로세스 완료!")
    UI.message("📊 최종 결과: #{successful_builds}/#{total_apps} 앱이 성공적으로 빌드 및 제출되었습니다")
    UI.message("💡 App Store Connect에서 제출 상태를 확인하세요: https://appstoreconnect.apple.com/")
  end
end